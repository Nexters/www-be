name: Java CI/CD with Maven

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-restore

      - name: Build with Maven
        run: mvn package -D spring.profiles.active=alpha

      - name: Docker build & push to prod
        if: contains(github.ref, 'develop') || contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t www-be -f ./infra/Dockerfile .
          docker tag www-be:latest ${{ secrets.DOCKER_USER }}/www-be:latest
          docker push ${{ secrets.DOCKER_USER }}/www-be:latest

      - name: Deploy to prod
        if: contains(github.ref, 'develop') || contains(github.ref, 'master')
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_NAME }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_USER }}/www-be:latest
            docker stop www-be
            docker rm www-be
            docker run -d --network www --name www-be -p 8080:8080 ${{ secrets.DOCKER_USER }}/www-be
            if docker images -f "dangling=true" -q | grep . > /dev/null; then
              docker rmi $(docker images -f "dangling=true" -q)
            fi
